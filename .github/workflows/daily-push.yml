name: Daily File Push

on:
  schedule:
    # Run daily at 9:00 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      day_override:
        description: 'Override day number (1-70)'
        required: false
        type: string

jobs:
  daily-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Calculate current day
      id: calculate-day
      run: |
        # Use a fixed start date for consistent day calculation
        START_DATE="2024-01-01"
        
        # Calculate days since start date
        START_TIMESTAMP=$(date -d "$START_DATE" +%s)
        CURRENT_TIMESTAMP=$(date +%s)
        DAYS_DIFF=$(( (CURRENT_TIMESTAMP - START_TIMESTAMP) / 86400 + 1 ))
        
        # Handle day override
        if [ -n "${{ github.event.inputs.day_override }}" ]; then
          DAYS_DIFF="${{ github.event.inputs.day_override }}"
        fi
        
        # Ensure day is within valid range
        if [ $DAYS_DIFF -lt 1 ]; then
          DAYS_DIFF=1
        elif [ $DAYS_DIFF -gt 70 ]; then
          DAYS_DIFF=70
        fi
        
        echo "day=$DAYS_DIFF" >> $GITHUB_OUTPUT
        echo "Calculated day: $DAYS_DIFF"
    
    - name: Get files for current day
      id: get-files
      run: |
        python -c "
        import json
        import sys
        
        try:
            with open('schedule.json', 'r') as f:
                schedule_data = json.load(f)
            
            day = ${{ steps.calculate-day.outputs.day }}
            print(f'Looking for day {day} in schedule')
            
            files = schedule_data['schedule'].get(str(day), [])
            print(f'Found files: {files}')
            
            if not files:
                print(f'No files scheduled for day {day}')
                sys.exit(1)
            
            # Output files as JSON array
            json_output = json.dumps(files)
            print(f'JSON output: {json_output}')
            print(json_output)
            
        except Exception as e:
            print(f'Error reading schedule: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        " > files.json
        
        echo "Contents of files.json:"
        cat files.json
        
        # Set output
        FILES=$(cat files.json)
        echo "files=$FILES" >> $GITHUB_OUTPUT
        echo "Files for day ${{ steps.calculate-day.outputs.day }}: $FILES"
    
    - name: Copy files from staging
      run: |
        # Parse files from JSON
        python -c "
        import json
        import shutil
        import os
        from pathlib import Path
        
        print('Reading files.json...')
        try:
            with open('files.json', 'r') as f:
                content = f.read()
                print(f'Raw content: {repr(content)}')
                files = json.loads(content)
        except Exception as e:
            print(f'Error reading files.json: {e}')
            import traceback
            traceback.print_exc()
            exit(1)
        
        print(f'Files to copy: {files}')
        
        for file_path in files:
            source = Path('_staging') / file_path
            dest = Path(file_path)
            
            print(f'Checking source: {source}')
            print(f'Source exists: {source.exists()}')
            
            if source.exists():
                # Ensure destination directory exists
                dest.parent.mkdir(parents=True, exist_ok=True)
                
                # Copy file
                shutil.copy2(source, dest)
                print(f'Successfully copied: {source} -> {dest}')
            else:
                print(f'ERROR: Source file not found: {source}')
                # List what's actually in the staging directory
                staging_dir = Path('_staging')
                if staging_dir.exists():
                    print(f'Contents of _staging: {list(staging_dir.rglob(\"*\"))}')
                else:
                    print('_staging directory does not exist!')
        "
    
    - name: Commit and push changes
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Show current status
        echo "Current git status:"
        git status
        
        # Add all changes
        git add .
        
        # Show what's staged
        echo "Staged changes:"
        git diff --staged --name-only
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Commit with descriptive message
          DAY=${{ steps.calculate-day.outputs.day }}
          COMMIT_MSG="Day $DAY: Push scheduled files"
          
          echo "Committing with message: $COMMIT_MSG"
          git commit -m "$COMMIT_MSG"
          
          # Push changes
          echo "Pushing to origin main..."
          git push origin main
          
          echo "Successfully pushed files for day $DAY"
        fi
    
    - name: Create progress summary
      run: |
        python -c "
        import json
        from datetime import datetime
        
        # Create progress summary
        progress = {
            'last_run': datetime.now().isoformat(),
            'day': ${{ steps.calculate-day.outputs.day }},
            'files_pushed': json.loads('${{ steps.get-files.outputs.files }}'),
            'total_days': 70,
            'progress_percentage': round((${{ steps.calculate-day.outputs.day }} / 70) * 100, 2)
        }
        
        with open('progress.json', 'w') as f:
            json.dump(progress, f, indent=2)
        
        print(f'Progress: Day {progress[\"day\"]}/70 ({progress[\"progress_percentage\"]}%)')
        "
    
    - name: Upload progress artifact
      uses: actions/upload-artifact@v4
      with:
        name: daily-push-progress
        path: progress.json
        retention-days: 30
